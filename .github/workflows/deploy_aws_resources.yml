name: Deploy CloudFormation Stacks

# Controls when the action will run.
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      region:
        description: "AWS Region"
        required: true
        default: "ap-southeast-2"
      SourceBucketName:
        description: "S3 Source Bucket Name"
        default: "source-bucket-chien"
        required: true
      DataBucketName:
        description: "S3 Data Bucket Name"
        default: "data-bucket-chien"
        required: true
      #   deployResource:
      #     description: "Deploy Resource stack?"
      #     required: true
      #     default: "false"
      deployVpc:
        description: "Deploy VPC Stack?"
        required: true
        default: "false"
      deployS3:
        description: "Deploy S3 Buckets Stack?"
        required: true
        default: "false"
      deployRedshift:
        description: "Deploy Redshift cluster?"
        required: true
        default: "false"
      deployCrawler:
        description: "Deploy Glue Crawler?"
        required: true
        default: "false"
      deployGlueJob:
        description: "Deploy Glue Job?"
        required: true
        default: "false"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  cfn-deployment:
    # if: ${{ github.event.inputs.deployResource == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ github.event.inputs.region }}

      - name: Deploy VPC CloudFormation Stack
        id: vpc-stack
        if: ${{ github.event.inputs.deployVpc == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: vpc-stack
          template: cfn/vpc.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            DataBucketName=${{ github.event.inputs.DataBucketName }}

      - name: Deploy S3 Buckets CloudFormation Stacks
        id: s3-buckets
        if: ${{ github.event.inputs.deployS3 == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: s3-buckets
          template: cfn/s3.yml
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            DataBucketName=${{ github.event.inputs.DataBucketName }}
          capabilities: CAPABILITY_NAMED_IAM

      - name: Deploy redshift
        id: redshift
        if: ${{ github.event.inputs.deployRedshift == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: redshift
          template: cfn/redshift.yml
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            DataBucketName=${{ github.event.inputs.DataBucketName }}
          capabilities: CAPABILITY_NAMED_IAM

      - name: Upload Glue Script
        if: ${{ github.event.inputs.deployGlueJob == 'true' }}
        run: |
          aws s3 cp scripts/ s3://${{ github.event.inputs.SourceBucketName }}/scripts/ --recursive

      # - name: Deploy Glue Job
      #   id: glue-job
      #   if: ${{ github.event.inputs.deployGlueJob == 'true' }}
      #   uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
      #   with:
      #     name: glue-job
      #     template: cfn/glue-job.yml
      #     capabilities: CAPABILITY_NAMED_IAM
      #     parameter-overrides: >-
      #       SourceBucketName=${{ github.event.inputs.SourceBucketName }},
      #       DataBucketName=${{ github.event.inputs.DataBucketName }},
      #       JobName=sales-aggregation-job,
      #       ScriptName=sales_etl.py

      - name: Deploy snowflake glue job
        if: ${{ github.event.inputs.deployGlueJob == 'true' }}
        id: glue-job-snowflake
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: glue-job-snowflake
          template: cfn/glue-job-snowflake.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            DataBucketName=${{ github.event.inputs.DataBucketName }},
            JobName=snowflake-ingest,
            ScriptName=snowflake_ingest.py,
            SnowflakeAccount=${{ secrets.SNOWFLAKE_ACCOUNT }}

      - name: Deploy Glue Crawler
        id: glue-crawler
        if: ${{ github.event.inputs.deployCrawler == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: glue-crawler
          template: cfn/glue-crawler.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            TargetPath=s3://${{ github.event.inputs.SourceBucketName }}/input/,
            CrawlerName=source-csv-crawler,
            Database=sales_db

      - name: Deploy Glue Crawler
        id: glue-crawler-snowflake
        if: ${{ github.event.inputs.deployCrawler == 'true' }}
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: glue-crawler-snowflake
          template: cfn/glue-crawler.yml
          capabilities: CAPABILITY_NAMED_IAM
          parameter-overrides: >-
            SourceBucketName=${{ github.event.inputs.SourceBucketName }},
            TargetPath=s3://${{ github.event.inputs.SourceBucketName }}/snowflake_exports/,
            CrawlerName=snowflake_input_crawler,
            Database=imba

      - name: dbt role
        id: dbt-glue-role
        uses: aws-actions/aws-cloudformation-github-deploy@v1.0.3
        with:
          name: dbt-glue-role
          template: cfn/dbt-role.yml
