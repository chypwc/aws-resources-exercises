Resources:
  VPCDefaultSecurityGroupIngress:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !GetAtt
        - VPC
        - DefaultSecurityGroup
      IpProtocol: "-1"
      CidrIp: !FindInMap
        - SubnetConfig
        - VPC
        - CIDR
  RedShiftSG:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupDescription: "Security group for Redshift cluster"
      VpcId: !Ref VPC
  RedshiftSGIngressSelfAllTcp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref RedShiftSG
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref RedShiftSG
  RedshiftSGIngressSelfAllUdp:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref RedShiftSG
      IpProtocol: udp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref RedShiftSG
  RedshiftSubnetGroup:
    Type: "AWS::Redshift::ClusterSubnetGroup"
    Properties:
      Description: "Redshift cluster subnet group"
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
  RedshiftClusterParameterGroup:
    Type: "AWS::Redshift::ClusterParameterGroup"
    Properties:
      Description:
        !Join [
          " ",
          [!Ref "AWS::StackName", " - Redshift Cluster Parameter group"],
        ]
      ParameterGroupFamily: redshift-1.0
  RedshiftCreds:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: !Sub Redshift cluster master user credentials for ${AWS::StackName}
      GenerateSecretString:
        SecretStringTemplate:
          !Join [
            "",
            [
              '{"username": "',
              !FindInMap [ClusterConfigurations, redshift, userName],
              '"}',
            ],
          ]
        GenerateStringKey: "password"
        PasswordLength: 16
        ExcludePunctuation: true
      Tags:
        - Key: RedshiftGlueBlogCred
          Value: "true"
  RedshiftIamRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - redshift.amazonaws.com
                - glue.amazonaws.com
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
        # These are inline policies which we define manually --- delete this lines  while using in cloud formation
      Policies:
        - PolicyName: Redshift-IAM-Policy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: AllowAccesstoDataBucket
                Effect: Allow
                Action:
                  - "s3:AbortMultipartUpload"
                  - "s3:DeleteObject"
                  - "s3:GetBucketVersioning"
                  - "s3:GetObject"
                  - "s3:GetObjectTagging"
                  - "s3:GetObjectVersion"
                  - "s3:ListBucket"
                  - "s3:ListBucketMultipartUploads"
                  - "s3:ListBucketVersions"
                  - "s3:ListMultipartUploadParts"
                  - "s3:PutBucketVersioning"
                  - "s3:PutObject"
                  - "s3:PutObjectTagging"
                Resource:
                  - !Sub "arn:aws:s3:::${DataBucket}"
                  - !Sub "arn:aws:s3:::${DataBucket}/*"
                  - !Sub "arn:aws:s3:::${SourceDataBucket}"
                  - !Sub "arn:aws:s3:::${SourceDataBucket}/*"
              - Sid: ListPermissions
                Effect: Allow
                Action:
                  - "s3:ListBucket"
                Resource:
                  - "*"
              - Sid: AllowIAMPass
                Effect: Allow
                Action:
                  - "iam:GetRole"
                  - "iam:PassRole"
                Resource:
                  - "*"
  RedshiftCluster:
    Type: "AWS::Redshift::Cluster"
    DependsOn:
      - RedshiftCreds
    Properties:
      ClusterIdentifier: !Sub ${AWS::StackName}-Redshift-Cluster
      DBName: !FindInMap [ClusterConfigurations, redshift, dbName]
      MasterUsername:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref RedshiftCreds,
            ":SecretString:username}}",
          ],
        ]
      MasterUserPassword:
        !Join [
          "",
          [
            "{{resolve:secretsmanager:",
            !Ref RedshiftCreds,
            ":SecretString:password}}",
          ],
        ]
      NodeType: !FindInMap [ClusterConfigurations, redshift, nodeType]
      ClusterType: !FindInMap [ClusterConfigurations, redshift, clusterType]
      NumberOfNodes: !FindInMap [ClusterConfigurations, redshift, nodeCount]
      PubliclyAccessible: false
      VpcSecurityGroupIds:
        - !Ref RedShiftSG
      IamRoles:
        - !GetAtt RedshiftIamRole.Arn
      ClusterSubnetGroupName: !Ref RedshiftSubnetGroup
      ClusterParameterGroupName: !Ref RedshiftClusterParameterGroup

  GlueRedshiftConnection:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        ConnectionType: JDBC
        Name: redshift-demo-connection
        PhysicalConnectionRequirements:
          SecurityGroupIdList:
            - !Ref RedShiftSG
          SubnetId: !Ref PrivateSubnet1
          AvailabilityZone: !Select
            - 0
            - !GetAZs
              Ref: "AWS::Region"
        ConnectionProperties:
          {
            "JDBC_CONNECTION_URL":
              !Join [
                "",
                [
                  "jdbc:redshift://",
                  !GetAtt RedshiftCluster.Endpoint.Address,
                  ":",
                  !GetAtt RedshiftCluster.Endpoint.Port,
                  "/",
                  !FindInMap [ClusterConfigurations, redshift, dbName],
                ],
              ],
            "USERNAME":
              !Join [
                "",
                [
                  "{{resolve:secretsmanager:",
                  !Ref RedshiftCreds,
                  ":SecretString:username}}",
                ],
              ],
            "PASSWORD":
              !Join [
                "",
                [
                  "{{resolve:secretsmanager:",
                  !Ref RedshiftCreds,
                  ":SecretString:password}}",
                ],
              ],
          }

Outputs:
  RedshiftClusterJdbcUrl:
    Description: JDBC URL for Redshift Cluster
    Value:
      !Join [
        "",
        [
          "jdbc:redshift:iam://",
          !GetAtt RedshiftCluster.Endpoint.Address,
          ":",
          !GetAtt RedshiftCluster.Endpoint.Port,
          "/",
          !FindInMap [ClusterConfigurations, redshift, dbName],
        ],
      ]
  RedshiftUserName:
    Description: Username for Redshift cluster
    Value: !FindInMap [ClusterConfigurations, redshift, userName]
  RedshiftIamRoleArn:
    Description: AWS IAM role ARN for Redshift
    Value: !GetAtt RedshiftIamRole.Arn
  RedshiftS3TempPath:
    Description: Temporary path used by Redshift to store data
    Value: !Join ["", ["s3://", !Ref DataBucket, "/redshift-temp-dir/"]]
