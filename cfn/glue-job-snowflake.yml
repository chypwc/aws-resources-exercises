Parameters:
  SourceBucketName:
    Description: Name the source Bucket
    Type: String
  DataBucketName:
    Description: Name the data Bucket
    Type: String
  ScriptName:
    Description: Name the script
    Type: String
  JobName:
    Description: Name the Glue Job
    Type: String
  SnowflakeAccount:
    Description: snowflake account, e.g., DHxxxxX-AA1234
    Type: String

Resources:
  GlueServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: GlueServiceRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: glue.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      Tags:
        - Key: Name
          Value: GlueServiceRole
      Policies:
        - PolicyName: GlueCustomAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub "arn:aws:s3:::${SourceBucketName}"
                  - !Sub "arn:aws:s3:::${SourceBucketName}/*"
                  - !Sub "arn:aws:s3:::${DataBucketName}"
                  - !Sub "arn:aws:s3:::${DataBucketName}/*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - logs:DescribeLogGroups
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                Resource: "*"
              - Effect: Allow
                Action:
                  - glue:GetConnection
                  - glue:GetConnections
                Resource: "*"
              - Effect: Allow
                Action:
                  - codewhisperer:GenerateRecommendations
                  - codewhisperer:ListRecommendations
                  - codewhisperer:GetRecommendation
                Resource: "*"

  GlueSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for AWS Glue to access Snowflake over JDBC
      VpcId: !ImportValue vpc-stack-VPCId # Ensure this value is exported from your VPC stack
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: "tcp"
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: Name
          Value: GlueSecurityGroup

  GlueSecurityGroupSelfIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref GlueSecurityGroup
      IpProtocol: "-1"
      SourceSecurityGroupId: !Ref GlueSecurityGroup

  SnowflakeGlueConnection:
    Type: AWS::Glue::Connection
    Properties:
      CatalogId: !Ref AWS::AccountId
      ConnectionInput:
        Name: snowflake-connection
        ConnectionType: "SNOWFLAKE"
        Description: Native Glue connection to Snowflake using Secrets Manager
        ConnectionProperties:
          SparkProperties: !Sub >
            {
              "sfUrl": "https://${SnowflakeAccount}.snowflakecomputing.com",
              "secretId": "snowflake"
            }
          PythonProperties: !Sub >
            {
              "account": "${SnowflakeAccount}"
            }
        PhysicalConnectionRequirements:
          SecurityGroupIdList:
            - !Ref GlueSecurityGroup
          SubnetId: !ImportValue vpc-stack-PrivateSubnet1
          AvailabilityZone: !Select
            - 0
            - !GetAZs
              Ref: "AWS::Region"

  GlueJob:
    Type: AWS::Glue::Job
    Properties:
      Name: !Sub "${JobName}"
      Role: !GetAtt GlueServiceRole.Arn
      Description: "Glue Spark job to ingest data from Snowflake"
      GlueVersion: "4.0"
      WorkerType: G.1X
      NumberOfWorkers: 5
      Timeout: 60 # minutes
      ExecutionClass: FLEX
      ExecutionProperty:
        MaxConcurrentRuns: 1
      Command:
        Name: glueetl
        ScriptLocation: !Sub "s3://${SourceBucketName}/scripts/${ScriptName}"
        PythonVersion: "3"
      DefaultArguments:
        "--TempDir": !Sub "s3://${DataBucketName}/tmp/"
        "--job-language": "python"
        "--enable-continuous-cloudwatch-log": "true"
        "--enable-metrics": "true"
        "--conf": "spark.sql.sources.partitionOverwriteMode=dynamic"
        "--SF_SECRET_NAME": "snowflake"
        "--TARGET_S3_BUCKET": !Ref SourceBucketName
        "--CONNECTION_NAME": "snowflake-connection"
        "--enable-network-isolation": "true"
      Connections:
        Connections:
          - snowflake-connection
      Tags:
        Environment: dev
